#!/usr/bin/env python
import sys
import time
import subprocess
import requests
import json
from dns import reversename, resolver
from dns.resolver import Resolver
from dns.resolver import NXDOMAIN
from dns.resolver import NoAnswer
from dns.resolver import NoNameservers
from dns.exception import Timeout
from cli import cli
from cli import configure
from multiprocessing.dummy import Pool as ThreadPool

'''
This code is executed as a one-shot script and takes no parameters.
It fetches all object-groups containing the description field
starting with FQDN:<fully.qualified.domain.name> and resolves to the
corresponding IPs, re-scheduling the next iteration at the min(TTL)

Note: IOS-XE does not allow creation of empty object-groups, so adding
new FQDN based objects must be done as the following:

  object-group network ACME-WWW
    host 127.0.0.1
    description FQDN:www.acme.com

After first iteration 127.0.0.1 will be replaced by the resolved IP(s)
'''

DEBUG_LOG   = False
MAX_THREADS = 8
MIN_TTL     = 30


def log(message, severity):
    cli('send log %d "%s"' % (severity, message))


def dns_lookup_Parallel(object_groups, threads=MAX_THREADS):
    pool = ThreadPool(threads)
    results = pool.map(dns_lookup, object_groups)
    pool.close()
    pool.join()
    return results


def dns_lookup(object_group):
    global DEBUG_LOG
    fqdn = objects[object_group]["fqdn"]
    if DEBUG_LOG:
        log("Looking up %s" % fqdn, 5)

    try:
        answers = resolver.query(fqdn, 'A')
        objects[object_group]["resolved"]   = [answer.address for answer in answers]
        objects[object_group]["ttl"]        = find_ttl(fqdn)

        pass

    except NXDOMAIN:
        pass
    except NoAnswer:
        pass
    except NoNameservers:
        pass
    except Timeout:
        pass

def find_ttl(zone):
    resolver = Resolver()
    tokens = zone.split(".")

    # Find Authoritative DNS Servers
    while True:
        if not tokens:
            break

        try:
            answers         = resolver.query(".".join(tokens), 'NS')
            authoritatives  = [resolver.query(str(answer))[0].address for answer in answers]
            if authoritatives:
                break

        except NXDOMAIN:
            pass
        except NoAnswer:
            pass
        except NoNameservers:
            pass
        except Timeout:
            pass

        tokens.pop(0)


    # Query TTL against authoritatives
    resolver.nameservers = authoritatives
    try:
        ttl = resolver.query(zone, 'A').rrset.ttl
        # Return zone TTL
        return ttl

    except NXDOMAIN:
        pass
    except NoAnswer:
        pass
    except NoNameservers:
        pass
    except Timeout:
        pass

    # Return default TTL in case not found
    return MIN_TTL


def restconf(method,resource):
    # can't use because REST API returns a single element instead of list of all elements
    # in a future when Cisco fixes it'll be preferred over the current object_group_lookup() parser

    self_ip = cli("show ip interface GigabitEthernet 0").split("\n")[2].split(" ")[-1].split("/")[0]
    rest_url = "https://%s/restconf/data/Cisco-IOS-XE-native:native/Cisco-IOS-XE-native:" % (SELF_IP)
    headers = {
        'accept': "application/yang-data+json"
    }
    query = {"with-defaults":"report-all"}
    query = {"depth":"4"}
    response = requests.request(method, rest_url + resource, params=query, headers=headers, verify=False, auth=('admin', 'ldaldalda111'))
    return json.loads(response.text)


def object_group_lookup():
    text = cli("show object-group").splitlines()
    object_groups = {}

    for i in range(len(text)):
        line = text[i]
        if "Description FQDN:" in line:
            fqdn = line.split("Description FQDN:")[1]
            name = text[i-1].split("Network object group ")[1]

            object_groups[name] = {
                "fqdn": fqdn,
                "hosts": []
            }

            try:
                for x in xrange(16):
                        cur_line = text[i+x+1]

                        if "host" in cur_line:
                            object_groups[name]["hosts"].append(cur_line.split("host ")[1])

                        if "Network" in cur_line:
                            break

                        if "object" in cur_line:
                            break

                        if cur_line == "":
                            break

            except:
                continue

    return object_groups


def object_group_configure(object_group,ip,action):
    OBJECT_GROUP_ADD = """
object-group network %s
  host %s
"""

    OBJECT_GROUP_DEL = """
object-group network %s
  no host %s
"""
    localtime = time.asctime(time.localtime(time.time()))
    remark = "Added %s @%s" % (ip,localtime)

    if action == 'add':
        responses = configure(OBJECT_GROUP_ADD % (object_group,ip))

    if action == 'del':
        responses = configure(OBJECT_GROUP_DEL % (object_group,ip))

    success = reduce (lambda x, y : x and y, [r.success for r in responses])
    status = "Success" if success else "Fail"
    log("RESOLVER(%s): %s IP: %s - status: %s" % (object_group, action, ip, status), 5)


def reschedule(seconds):
    global DEBUG_LOG
    UPDATE_SCRIPT_FIRING_COMMANDS = """
event manager applet FQDN-POLLER
 event timer watchdog time %s
 action 1.0 cli command "enable"
 action 1.1 cli command "guestshell run /home/guestshell/fqdn-poller
"""
    responses = configure(UPDATE_SCRIPT_FIRING_COMMANDS % (seconds))
    success = reduce(lambda x, y: x and y, [r.success for r in responses])
    status = "Success" if success else "Fail"
    if DEBUG_LOG:
        log("reschedule in : %s seconds: status: %s" % (str(seconds), status), 5)



def main():
    global MIN_TTL
    # Fix guestshell resolvers
    p = subprocess.Popen("printf \"nameserver 10.100.0.9\nnameserver 10.104.0.9\n\" | sudo tee /etc/resolv.conf", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # Fetch and resolve FQDN object groups
    global objects
    objects = object_group_lookup()

    dns_lookup_Parallel(list(objects))

    for item in objects:

        # Diff resolved hosts vs. current object-group hosts
        include           = list(set(objects[item]["resolved"]) - set(objects[item]["hosts"]))
        exclude           = list(set(objects[item]["hosts"]) - set(objects[item]["resolved"]))

        # Synchronize config
        for ip in include:
            object_group_configure(item,ip,"add")

        for ip in exclude:
            object_group_configure(item,ip,"del")

        # Polling interval should consider the minimum original TTL
        ttl = objects[item]["ttl"]

        if ttl < MIN_TTL >= 5:
            MIN_TTL = ttl + 1

    reschedule(MIN_TTL)


if __name__ == "__main__":
    main()
